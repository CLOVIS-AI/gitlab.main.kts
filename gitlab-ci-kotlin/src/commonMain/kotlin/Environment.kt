/*
 * Copyright (c) 2025, OpenSavvy and contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package opensavvy.gitlab.ci

import opensavvy.gitlab.ci.yaml.Yaml
import opensavvy.gitlab.ci.yaml.yaml
import opensavvy.gitlab.ci.yaml.yamlMap

/**
 * Declares which environment this job interacts with.
 *
 * To declare the environment, see [Job.environment].
 */
@GitLabCiDsl
class Environment internal constructor() : YamlExport {
	internal var name: String? = null
	private var url: String? = null
	private var onStop: Job? = null
	private var action: EnvironmentAction = EnvironmentAction.Start
	private var tier: EnvironmentTier? = null

	/**
	 * Declares the name of the environment, as it will be displayed in the GitLab UI.
	 *
	 * ```kotlin
	 * val deploy-qa by job {
	 *     script {
	 *         // …
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *         url("https://qa.your.app/dashboard")
	 *     }
	 * }
	 * ```
	 *
	 * ### External resources
	 *
	 * - [Official documentation](https://docs.gitlab.com/ci/yaml/#environmentname)
	 */
	@GitLabCiDsl
	fun name(name: String) {
		this.name = name
	}

	/**
	 * Declares the URL on which the deployed environment is available.
	 *
	 * ### Example
	 *
	 * ```kotlin
	 * val deploy-qa by job {
	 *     script {
	 *         // …
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *         url("https://qa.your.app/dashboard")
	 *     }
	 * }
	 * ```
	 *
	 * ### Example: dynamic URL
	 *
	 * The URL can be generated by the job itself by combining this feature with [Artifacts.dotenv]:
	 * ```kotlin
	 * val deploy-qa by job {
	 *     script {
	 *         shell("QA_URL=$(./generate-url) >>qa.env")
	 *     }
	 *
	 *     artifacts {
	 *         dotenv("qa.env")
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *         url($$"$QA_URL")
	 *     }
	 * }
	 * ```
	 *
	 * ### External resources
	 *
	 * - [Official documentation](https://docs.gitlab.com/ci/yaml/#environmenturl)
	 */
	@GitLabCiDsl
	fun url(url: String) {
		this.url = url
	}

	/**
	 * Specifies a [stopJob] that will be executed once the environment should be stopped.
	 *
	 * The stop job should have the same configuration but without a declared [url].
	 *
	 * ### Example
	 *
	 * ```kotlin
	 * val stopQa by job {
	 *     script {
	 *         // …
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *     }
	 * }
	 *
	 * val deployQa by job {
	 *     script {
	 *         // …
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *         url("https://qa.your.app/dashboard")
	 *         onStop(stopQa)
	 *     }
	 * }
	 * ```
	 *
	 * ### External resources
	 *
	 * - [Official documentation](https://docs.gitlab.com/ci/yaml/#environmenton_stop)
	 */
	@GitLabCiDsl
	fun stopJob(stopJob: Job) {
		this.onStop = stopJob
	}

	/**
	 * Specify how this job interacts with the environment. See [EnvironmentAction].
	 *
	 * ### Example
	 *
	 * ```kotlin
	 * val verifyQa by job {
	 *     script {
	 *         // …
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *         action(EnvironmentAction.Verify)
	 *     }
	 * }
	 * ```
	 *
	 * ### External resources
	 *
	 * - [Official documentation](https://docs.gitlab.com/ci/yaml/#environmentaction)
	 */
	@GitLabCiDsl
	fun action(action: EnvironmentAction) {
		this.action = action
	}

	/**
	 * Declares which tier this job deploys.
	 *
	 * ### Example
	 *
	 * ```kotlin
	 * val verifyQa by job {
	 *     script {
	 *         // …
	 *     }
	 *
	 *     environment {
	 *         name("qa")
	 *         tier(EnvironmentTier.Testing)
	 *     }
	 * }
	 * ```
	 *
	 * ### External resources
	 *
	 * - [Official documentation](https://docs.gitlab.com/ci/yaml/#environmentaction)
	 */
	@GitLabCiDsl
	fun tier(tier: EnvironmentTier) {
		this.tier = tier
	}

	override fun toYaml(): Yaml {
		val data = HashMap<Yaml, Yaml>()

		if (name != null)
			data[yaml("name")] = yaml(name)

		if (url != null && action != EnvironmentAction.Stop)
			data[yaml("url")] = yaml(url)

		data[yaml("action")] = yaml(action.name.lowercase())

		if (tier != null)
			data[yaml("deployment_tier")] = yaml(tier!!.name.lowercase())

		return yamlMap(data)
	}

	enum class EnvironmentAction {
		/**
		 * 	Default value. Indicates that the job starts the environment. The deployment is created after the job starts.
		 */
		Start,

		/**
		 * 	Indicates that the job is only preparing the environment. It does not trigger deployments. [Read more about preparing environments](https://docs.gitlab.com/ci/environments/#access-an-environment-for-preparation-or-verification-purposes).
		 */
		Prepare,

		/**
		 * 	Indicates that the job stops an environment. [Read more about stopping an environment](https://docs.gitlab.com/ci/environments/#access-an-environment-for-preparation-or-verification-purposes).
		 */
		Stop,

		/**
		 * 	Indicates that the job is only verifying the environment. It does not trigger deployments. [Read more about verifying environments](https://docs.gitlab.com/ci/environments/#access-an-environment-for-preparation-or-verification-purposes).
		 */
		Verify,

		/**
		 * 	Indicates that the job is only accessing the environment. It does not trigger deployments. [Read more about accessing environments](https://docs.gitlab.com/ci/environments/#access-an-environment-for-preparation-or-verification-purposes).
		 */
		Access,
	}

	enum class EnvironmentTier {
		Production,
		Staging,
		Testing,
		Development,
		Other,
	}
}
